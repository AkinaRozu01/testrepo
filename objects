#objects
#add
from fractions import gcd
import random
class Fractions:
    numer = 0
    denom = 0

#making the fraction   
    def __init__(self, numer, denom):
        self.numer = numer
        self.denom = denom

    def makeFract(self):
        print(str(self.numer) + "/" + str(self.denom))

#addition    
    def addFract(self, fraction):
        newDenom = self.denom * fraction.denom
        Numer1 = self.numer * fraction.denom
        Numer2 = fraction.numer * self.denom
        newNumer = Numer1 + Numer2
        print(str(newNumer / newDenom) + " " + str(newNumer % newDenom) + "/" + str(newDenom))

#subtract
    def subFract(self, fraction):
        newDenom = self.denom * fraction.denom
        Numer1 = self.numer * fraction.denom
        Numer2 = fraction.numer * self.denom
        newNumer = Numer2 - Numer1
        print(str(newNumer) + "/" + str(newDenom))

#multiplication
    def multFract(self, fraction):
        newDenom = self.denom * fraction.denom
        newNumer = self.numer * fraction.numer
        print(str(newNumer) + "/" + str(newDenom))
#division
    def divFract(self, fraction):
        newNumer = self.numer * fraction.denom
        newDenom = self.denom * fraction.numer
        print(str(newNumer) + "/" + str(newDenom))
#simplification
    def simpFract(self):
        x = gcd(int(self.numer), int(self.denom))
        Numer = self.numer / x
        Denom = self.denom / x
        print(str(Numer) + "/" + str(Denom))
numerator = random.randint(1, 10)
denominator = random.randint(1, 10)
newNumer = random.randint(1, 10)
newDenom = random.randint(1, 10)
f1 = Fractions(numerator, denominator)
f2 = Fractions(newNumer, newDenom)
f1.makeFract()
f2.makeFract()
f2.addFract(f1)
f2.subFract(f1)
f2.multFract(f1)
f2.divFract(f1)
f1.simpFract()
f2.subFract(f1)
